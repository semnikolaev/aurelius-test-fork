import { Dictionary, invert } from 'lodash';

export const archimate3 = {
  elements: {
    ar3_AndJunction: 'And Junction',
    ar3_ApplicationCollaboration: 'Application Collaboration',
    ar3_ApplicationComponent: 'Application Component',
    ar3_ApplicationEvent: 'Application Event',
    ar3_ApplicationFunction: 'Application Function',
    ar3_ApplicationInteraction: 'Application Interaction',
    ar3_ApplicationInterface: 'Application Interface',
    ar3_ApplicationProcess: 'Application Process',
    ar3_ApplicationService: 'Application Service',
    ar3_Artifact: 'Artifact',
    ar3_Assessment: 'Assessment',
    ar3_BusinessActor: 'Business Actor',
    ar3_BusinessCollaboration: 'Business Collaboration',
    ar3_BusinessEvent: 'Business Event',
    ar3_BusinessFunction: 'Business Function',
    ar3_BusinessInteraction: 'Business Interaction',
    ar3_BusinessInterface: 'Business Interface',
    ar3_BusinessObject: 'Business Object',
    ar3_BusinessProcess: 'Business Process',
    ar3_BusinessRole: 'Business Role',
    ar3_BusinessService: 'Business Service',
    ar3_Capability: 'Capability',
    ar3_CommunicationNetwork: 'Communication Network',
    ar3_Constraint: 'Constraint',
    ar3_Contract: 'Contract',
    ar3_CourseOfAction: 'Course of Action',
    ar3_DataObject: 'Data Object',
    ar3_Deliverable: 'Deliverable',
    ar3_Device: 'Device',
    ar3_DistributionNetwork: 'Distribution Network',
    ar3_Driver: 'Driver',
    ar3_Equipment: 'Equipment',
    ar3_Facility: 'Facility',
    ar3_Gap: 'Gap',
    ar3_Goal: 'Goal',
    ar3_Grouping: 'Grouping',
    ar3_ImplementationEvent: 'Implementation Event',
    ar3_Location: 'Location',
    ar3_Material: 'Material',
    ar3_Meaning: 'Meaning',
    ar3_Node: 'Node',
    ar3_OrJunction: 'Or Junction',
    ar3_Path: 'Path',
    ar3_Outcome: 'Outcome',
    ar3_Plateau: 'Plateau',
    ar3_Principle: 'Principle',
    ar3_Product: 'Product',
    ar3_Representation: 'Representation',
    ar3_Requirement: 'Requirement',
    ar3_Resource: 'Resource',
    ar3_Stakeholder: 'Stakeholder',
    ar3_SystemSoftware: 'System Software',
    ar3_TechnologyCollaboration: 'Technology Collaboration',
    ar3_TechnologyEvent: 'Technology Event',
    ar3_TechnologyFunction: 'Technology Function',
    ar3_TechnologyInteraction: 'Technology Interaction',
    ar3_TechnologyInterface: 'Technology Interface',
    ar3_TechnologyProcess: 'Technology Process',
    ar3_TechnologyService: 'Technology Service',
    ar3_Value: 'Value',
    ar3_ValueStream: 'Value Stream',
    ar3_WorkPackage: 'Work Package',
    ar3_Unknown: '-- Please select a type --',
    lineage_dataset: 'Dataset',
    lineage_process: 'Process',
  },
  relations: {
    a: 'Access',
    ar: 'Access Read',
    aw: 'Access Write',
    arw: 'Access Read/Write',
    g: 'Aggregation',
    i: 'Assignment',
    o: 'Association',
    do: 'Directed Association',
    c: 'Composition',
    f: 'Flow',
    n: 'Influence',
    r: 'Realization',
    v: 'Serving',
    s: 'Specialization',
    t: 'Triggering',
  },
  relations_by_tag: {
    ar3_Access: 'Access',
    ar3_Aggregation: 'Aggregation',
    ar3_Assignment: 'Assignment',
    ar3_Association: 'Association',
    ar3_Composition: 'Composition',
    ar3_Flow: 'Flow',
    ar3_Influence: 'Influence',
    ar3_Realization: 'Realization',
    ar3_Serving: 'Serving',
    ar3_Specialization: 'Specialization',
    ar3_Triggering: 'Triggering',
    lineage_relation: 'Data Lineage',
  },
};

/**
 * Swaps the keys and values in the dictionary of concepts, such that the human readable names are used as keys
 * @param concepts the set of concepts to invert
 */
export function toHumanReadableNames(concepts: Dictionary<string>) {
  return invert(concepts);
}
